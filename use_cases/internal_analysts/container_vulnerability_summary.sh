#!/bin/bash

# Check if at least one argument is provided
if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <container-image> [CVE-ID] [RHSA-ID]"
    exit 1
fi

IMAGE=$1
CVE_ID=$2
RHSA_ID=$3

# Pyxis API URL
PYXIS_URL="https://catalog.redhat.com/api/containers/v1"

# Function to get image metadata from Pyxis
get_image_metadata() {
    local namespace=$1
    local repository=$2
    local tag=$3
    if [[ $tag == sha256:* ]]; then
        curl -s "$PYXIS_URL/repositories/registry/registry.access.redhat.com/repository/$namespace/$repository/images?filter=digest=$tag" | jq '.data[0]'
    else
        curl -s "$PYXIS_URL/repositories/registry/registry.access.redhat.com/repository/$namespace/$repository/tag/$tag" | jq '.data[0]'
    fi
}

# Function to get CVE details from Red Hat Security Data API
get_cve_details() {
    local cve_id=$1
    curl -s "https://access.redhat.com/hydra/rest/securitydata/cve/$cve_id.json"
}

# Function to get RHSA details from Red Hat Security Data API
get_rhsa_details() {
    local rhsa_id=$1
    curl -s "https://access.redhat.com/hydra/rest/securitydata/cvrf/$rhsa_id.json"
}

# Function to get build history of the image
get_build_history() {
    local namespace=$1
    local repository=$2
    curl -s "$PYXIS_URL/repositories/registry/registry.access.redhat.com/repository/$namespace/$repository/images?sort_by=creation_date" | jq -r '.data[] | {build_date: .creation_date, version: .brew.nvra}'
}

# Function to generate a summary
generate_summary() {
    local cve_published_date=$1
    local rhsa_release_date=$2
    local build_date=$3

    echo -e "\n=== Summary ==="
    echo "CVE Published Date: $cve_published_date"
    echo "RHSA Release Date: $rhsa_release_date"
    echo "Container Image Rebuilt Date: $build_date"
    if [ -n "$cve_published_date" ] && [ -n "$rhsa_release_date" ] && [ -n "$build_date" ]; then
        local cve_to_rhsa=$(( ( $(date -d "$rhsa_release_date" +%s) - $(date -d "$cve_published_date" +%s) ) / 86400 ))
        local rhsa_to_build=$(( ( $(date -d "$build_date" +%s) - $(date -d "$rhsa_release_date" +%s) ) / 86400 ))
        echo "Time from CVE Publication to RHSA Release: $cve_to_rhsa days"
        echo "Time from RHSA Release to Container Rebuild: $rhsa_to_build days"
    fi
}

# Main script execution

# Extract namespace and repository from the image
NAMESPACE=$(echo $IMAGE | cut -d'/' -f2)
REPOSITORY=$(echo $IMAGE | cut -d'/' -f3 | cut -d':' -f1)
TAG=$(echo $IMAGE | cut -d':' -f2)

# Initialize summary
SUMMARY=""

# Step 1: Get image metadata
echo "Fetching image metadata..."
IMAGE_METADATA=$(get_image_metadata $NAMESPACE $REPOSITORY $TAG)
IMAGE_ID=$(echo "$IMAGE_METADATA" | jq -r '._id')

if [ -z "$IMAGE_ID" ];then
    echo "Error: Unable to get image ID for $IMAGE"
    exit 1
fi

SUMMARY+="Image ID: $IMAGE_ID\n"

# Step 2: Get CVEs and RHSAs associated with the image
echo "Fetching CVEs and RHSAs associated with the image..."
CVES=$(curl -s "$PYXIS_URL/images/id/$IMAGE_ID/vulnerabilities" | jq -r '.data[] | .cve_id')
RPM_MANIFEST=$(curl -s "$PYXIS_URL/images/id/$IMAGE_ID/rpm-manifest")
RHSAS=$(echo "$RPM_MANIFEST" | jq -r '.rpms[]?.advisories | select(. != null) | .[] | select(.advisory_type == "RHSA") | .id' | sort -u)

# Step 3: Get details for each CVE and RHSA
for CVE in $CVES; do
    CVE_DETAILS=$(get_cve_details $CVE)
    CVE_PUBLISHED_DATE=$(echo "$CVE_DETAILS" | jq -r '.public_date')
    AFFECTED_RELEASES=$(echo "$CVE_DETAILS" | jq -r '.affected_release[] | "\(.product_name) \(.package_version // "N/A")"')
    SUMMARY+="\nCVE ID: $CVE\nPublished Date: $CVE_PUBLISHED_DATE\nAffected Releases:\n$AFFECTED_RELEASES\n"
done

for RHSA in $RHSAS; do
    RHSA_DETAILS=$(get_rhsa_details $RHSA)
    RHSA_RELEASE_DATE=$(echo "$RHSA_DETAILS" | jq -r '.document_notes.note[] | select(.title == "Issue Date") | .date')
    SUMMARY+="\nRHSA ID: $RHSA\nRelease Date: $RHSA_RELEASE_DATE\n"
done

# Step 4: Get build history of the image
echo "Fetching build history..."
BUILD_HISTORY=$(get_build_history $NAMESPACE $REPOSITORY)
SUMMARY+="\nBuild History:\n$BUILD_HISTORY\n"

# Step 5: Calculate time intervals between CVE publication, RHSA release, and the next container image rebuild
for CVE in $CVES; do
    CVE_DETAILS=$(get_cve_details $CVE)
    CVE_PUBLISHED_DATE=$(echo "$CVE_DETAILS" | jq -r '.public_date')

    for RHSA in $RHSAS; do
        RHSA_DETAILS=$(get_rhsa_details $RHSA)
        RHSA_RELEASE_DATE=$(echo "$RHSA_DETAILS" | jq -r '.document_notes.note[] | select(.title == "Issue Date") | .date')

        # Get the build date after the RHSA release date
        BUILD_DATE=$(echo "$BUILD_HISTORY" | jq -r --arg date "$RHSA_RELEASE_DATE" 'select(.build_date > $date) | .build_date' | head -n 1)
        generate_summary "$CVE_PUBLISHED_DATE" "$RHSA_RELEASE_DATE" "$BUILD_DATE"
    done
done

# Output summary
echo -e "\n=== Container Vulnerability Summary ==="
echo -e "$SUMMARY"